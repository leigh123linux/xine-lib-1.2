.TH "vo_driver_s" 3 "17 Sep 2001" "XINE, A Free Video Player Project - API reference" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vo_driver_s \- 
.SH SYNOPSIS
.br
.PP
\fC#include <xine.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "uint32_t (* \fBget_capabilities\fP )(\fBvo_driver_t\fP *self)"
.br
.ti -1c
.RI "\fBvo_frame_t\fP* (* \fBalloc_frame\fP )(\fBvo_driver_t\fP *self)"
.br
.ti -1c
.RI "void (* \fBupdate_frame_format\fP )(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *img, uint32_t width, uint32_t height, int ratio_code, int format)"
.br
.ti -1c
.RI "void (* \fBdisplay_frame\fP )(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *vo_img)"
.br
.ti -1c
.RI "void (* \fBoverlay_blend\fP )(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *vo_img, \fBvo_overlay_t\fP *overlay)"
.br
.ti -1c
.RI "int (* \fBget_property\fP )(\fBvo_driver_t\fP *self, int property)"
.br
.ti -1c
.RI "int (* \fBset_property\fP )(\fBvo_driver_t\fP *self, int property, int value)"
.br
.ti -1c
.RI "void (* \fBget_property_min_max\fP )(\fBvo_driver_t\fP *self, int property, int *min, int *max)"
.br
.ti -1c
.RI "int (* \fBgui_data_exchange\fP )(\fBvo_driver_t\fP *self, int data_type, void *data)"
.br
.ti -1c
.RI "void (* \fBexit\fP )(\fBvo_driver_t\fP *self)"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Video driver fonctions. 
.PP
.SH "FIELD DOCUMENTATION"
.PP 
.SS "\fBvo_frame_t\fP *(* vo_driver_s::alloc_frame)(\fBvo_driver_t\fP *self)"
.PP
Allocate an \fBvo_frame_t\fP struct, the driver must supply the copy, field and dispose functions 
.SS "void(* vo_driver_s::display_frame)(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *vo_img)"
.PP
Display a given frame 
.SS "void(* vo_driver_s::exit)(\fBvo_driver_t\fP *self)"
.PP
Leaving video driver. 
.SS "uint32_t(* vo_driver_s::get_capabilities)(\fBvo_driver_t\fP *self)"
.PP
Get capabilities of video driver. 
.PP
\fBSee also: \fP
.in +1c
video driver capabilities 
.SS "int(* vo_driver_s::get_property)(\fBvo_driver_t\fP *self, int property)"
.PP
Get value if property. 
.PP
\fBSee also: \fP
.in +1c
Constants for the get/set properties functions. 
.SS "void(* vo_driver_s::get_property_min_max)(\fBvo_driver_t\fP *self, int property, int *min, int *max)"
.PP
Get min/max values of property. 
.PP
\fBSee also: \fP
.in +1c
Constants for the get/set properties functions. 
.SS "int(* vo_driver_s::gui_data_exchange)(\fBvo_driver_t\fP *self, int data_type, void *data)"
.PP
General purpose communication channel between gui and driver
.PP
this should be used to propagate events, display data, window sizes etc. to the driver 
.SS "void(* vo_driver_s::overlay_blend)(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *vo_img, \fBvo_overlay_t\fP *overlay)"
.PP
Overlay functions 
.SS "int(* vo_driver_s::set_property)(\fBvo_driver_t\fP *self, int property, int value)"
.PP
Set value of property. 
.PP
\fBSee also: \fP
.in +1c
Constants for the get/set properties functions. 
.SS "void(* vo_driver_s::update_frame_format)(\fBvo_driver_t\fP *self, \fBvo_frame_t\fP *img, uint32_t width, uint32_t height, int ratio_code, int format)"
.PP
Check if the given image fullfills the format specified (re-)allocate memory if necessary 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for XINE, A Free Video Player Project - API reference from the source code.